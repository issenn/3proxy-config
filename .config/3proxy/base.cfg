#!/usr/local/bin/3proxy


system "echo 3proxy up!"
system "echo load base config!"


# Set timeouts

# 各项连接选项的超时时间
# timeouts <BYTE_SHORT> <BYTE_LONG> <STRING_SHORT> <STRING_LONG> <CONNECTION_SHORT> <CONNECTION_LONG> <DNS> <CHAIN>
# timeouts 1 5 30 60 180 1800 15 60


# Authentication
# users YOUR_USERNAME:CL:YOUR_PASSWORD

# 代理认证的用户名和密码，这里定义了两个用户，issenn的密码是knight，user的密码是pass，CL代表明文密码，多条之间空格分隔
# 用户名和密码中间的CL是明文密码类型，可以指定加密方式，目前有如下几种方法：
# No password type: use system authentication.
# CL - cleartext password (代表明文密码)
# CR - crypt password, only MD5 crypt passwords are supported (密码使用密文加密)
# NT - NT-hashed (MD4) passwords in hex, as used in pwdump or SAMBA (密文加密)
# users issenn:CL:knight user:CL:pass "test:CR:$1$qwer$CHFTUFGqkjue9HyhcMHEe1"


# Service installation, daemon for nix, service for win32
# windows 用service ,  linux 用 daemon，这一项是必须的
# daemon
# service


# Using Quad9 as primary and Cloudflare fallback for DNS

# 代理如果需要服务器解析，那么使用该dns解析并代理，我看官方的解释，默认是使用第一个的，如果第一个挂了才会使用第二个。如果不配置dns，则会使用服务器配置的dns地址，所以这里不是必须的，你可以注释掉
# 最多指定5个。

# Google Public DNS
# nserver 8.8.4.4
# nserver 8.8.8.8

# OpenDNS Public DNS
nserver 208.67.222.222:5353/tcp
# nserver 208.67.220.220:5353/tcp

# Cloudflare Public DNS
nserver 1.1.1.1:53/tcp
# nserver 1.0.0.1:53/tcp

# Level 3
# nserver 209.244.0.3
# nserver 209.244.0.4

# CenturyLink (Level3)
# nserver 205.171.3.65
# nserver 205.171.2.65

# Verisign
# nserver 64.6.64.6
# nserver 64.6.65.6

# IBM Quad9
# nserver 9.9.9.9
# nserver 9.9.9.10

# DNS.WATCH # 德国
# nserver 84.200.69.80
# nserver 84.200.70.40

# Norton ConnectSafe
# nserver 199.85.126.10
# nserver 199.85.127.10

# SafeDNS
# nserver 195.46.39.39
# nserver 195.46.39.40

# Freenom World # 荷兰
# nserver 80.80.80.80
# nserver 80.80.81.81

# Dyn
# nserver 216.146.35.35
# nserver 216.146.36.36

# Yandex.DNS # 俄罗斯
# nserver 77.88.8.8
# nserver 77.88.8.1

# UncensoredDNS # 丹麦
nserver 91.239.100.100:53/tcp
# nserver 89.233.43.71:53/tcp

# Hurricane Electric
# nserver 74.82.42.42

# Neustar
# nserver 156.154.70.1
# nserver 156.154.71.1
# nserver 156.154.70.5
# nserver 156.154.71.5

# CleanBrowsing
# nserver 185.228.168.9
# nserver 185.228.169.9

# AdGuard Public DNS
# nserver 94.140.14.14
# nserver 94.140.15.15
# nserver 176.103.130.130
# nserver 176.103.130.131

# Control D
# nserver 76.76.2.0
# nserver 76.76.10.0

# DNSPod Public DNS+
nserver 119.29.29.29:53/tcp
# nserver 119.28.28.28:53/tcp   

# AliDNS
nserver 223.5.5.5:53/tcp
# nserver 223.6.6.6:53/tcp

# 114DNS
# nserver 114.114.114.114
# nserver 114.114.115.115

# DNSpai
# nserver 101.226.4.6
# nserver 218.30.118.6

# Enable DNS caching for IPv4 and IPv6

# 域名解析最大的缓存条目 默认即可，也可以注释掉
nscache 65536
nscache6 65535

nsrecord bitwarden.issenn.cf 10.0.0.102

# Set up logs

# 日志路径 参数D 是每天记录单独的日志文件
# log @3proxy
# log "C:/Users/saber/.local/share/3proxy/logs/3proxy.log" D

# 日志内容格式
logformat "- +_L%t.%. %Y-%m-%d %H:%M:%S  %N.%p %E %U %C:%c %R:%r %O %I %h %T"

# archiver rar rar a -df -inul %A %F
# archiver gz /usr/bin/gzip %F

# 保存最新的10个日志文件
rotate 10

# 日志参数必须放到auth iponly之前，否则不能记录


# External is the interface you will send data out from, set with a static IP
# external YOUR_INTERNAL_STATIC_IP

# 代理服务器向外转发的时候绑定的IP地址
# external 0.0.0.0

# Internal is the interface you will listen on, in this case localhost (no physical nic)

# 代理本地监听的IP地址
internal 127.0.0.1


# 代理认证类型
# none：不需要认证（默认类型）
# iponly：根据源IP地址进行ACL控制
# username：只验证用户名，用于Socks4代理
# nbname：认证基于NetBIOS （Windows系统）
# strong：基于弹窗用户名/密码认证，支持HTTP/POP3/FTP/SOCKSv5的代理类型
# cache：认证缓存，依赖authcache选项
# # auth strong / auth iponly atrong  可以同时开启多项认证方式

# allow选项，允许这两个用户通过认证，用英文的逗号分隔
# allow zdw,user
# allow <userlist> <sourcelist> <targetlist> <targetportlist> <operationlist> <weekdayslist> <timeperiodslist>  # allow选项的参数，选项支持 *匹配
# deny <userlist> <sourcelist> <targetlist> <targetportlist> <operationlist> <weekdayslist> <timeperiodslist>  # deny选项的参数，选项支持 *匹配
# Operation is one of:  代理连接方式支持以下方式
#        CONNECT - establish outgoing TCP connection
#        BIND - bind TCP port for listening
#        UDPASSOC - make UDP association
#        ICMPASSOC - make ICMP association (for future use)
#        HTTP_GET - HTTP GET request
#        HTTP_PUT - HTTP PUT request
#        HTTP_POST - HTTP POST request
#        HTTP_HEAD - HTTP HEAD request
#        HTTP_CONNECT - HTTP CONNECT request
#        HTTP_OTHER - over HTTP request
#        HTTP - matches any HTTP request except HTTP_CONNECT
#        HTTPS - same as HTTP_CONNECT
#        FTP_GET - FTP get request
#        FTP_PUT - FTP put request
#        FTP_LIST - FTP list request
#        FTP_DATA - FTP data connection. Note: FTP_DATA requires access to dynamic
#        non-ptivileged (1024-65535) ports on remote side.
#        FTP - matches any FTP/FTP Data request
#        ADMIN - access to administration interface
# allow * * 1.1.1.0/24,1.0.0.0/24,173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22 443

# 下面这段是代理级联、负载均衡什么的
# 向后代理，可以向后端转换代理类型，以及负载平衡 
# (注意：此种方式只适用于认证方式为 iponly或strong模式)权重weight为1000均分，所以你如果只有一个上级代理，那么权重就设置为1000吧，如果有多个代理，你可以分别设置300/700   300/400/300  500/500 等，这样才会在一组父代理中按照权重均分。
# parent <weight> <type> <ip> <port> <username> <password> 选项参数
# type is one of:
#        tcp - tcp直连  simply redirect connection. TCP is always last in chain.
#        http - 转发到http代理   redirect to HTTP proxy. HTTP is always last chain.
#        pop3 - redirect to POP3 proxy (only local redirection is supported, can not be used for chaining)
#        ftp - redirect to FTP proxy (only local redirection is supported, can not be used for chaining)
#        connect - parent is HTTP CONNECT method proxy
#        connect+ - parent is HTTP CONNECT proxy with name resolution
#        socks4 - parent is SOCKSv4 proxy
#        socks4+ - parent is SOCKSv4 proxy with name resolution (SOCKSv4a)
#        socks5 - parent is SOCKSv5 proxy
#        socks5+ - parent is SOCKSv5 proxy with name resolution
#        socks4b  -  parent  is  SOCKS4b  (broken  SOCKSv4  implementation  with  shortened server reply. I never saw this kind
#        ofservers byt they say there are).  Normally you should not use this option. Do not  mess  this  option  with  SOCKSv4a
#        (socks4+).
#        socks5b - parent is SOCKS5b (broken SOCKSv5 implementation with shortened server reply. I think you will never find it
#        useful). Never use this option unless you know exactly you need it.
#        admin - redirect request to local ’admin’ service (with -s parameter).
#        Use "+" proxy only with "fakeresolve" option
# parent 1000 connect+ 0.0.0.0 20001
# parent 1000 tcp 1.0.0.1 443

# 某一项代理方式可以设置无需记录日志
# nolog

# 速度限制段
# 首先，不限制issenn的速度
# nobandlimin issenn
# 然后，其他用户整体限制到5m
# bandlimin 5120000 *

# include /conf/counters
# include /conf/bandlimiters

# bandlimin <rate> <userlist> <sourcelist> <targetlist> <targetportlist> <operationlist>  # 入相带宽限制
# bandlimout  <rate>  <userlist> <sourcelist> <targetlist> <targetportlist> <operationlist>  # 出向带宽限制
# nobandlimin   <userlist>  <sourcelist>  <targetlist>  <targetportlist>  <operationlist>  # 入带宽不限制
# nobandlimout <userlist> <sourcelist> <targetlist> <targetportlist> <operationlist>  # 出带宽不限制

# 开启一个HTTP代理 端口是20001
# -n: 关闭windows NTML验证（使用上面定义的账号密码认证）
# -a: 匿名代理
# -i: 监听地址
# -p: 监听端口
# 默认端口3128
# proxy -n -i127.0.0.1 -p20001 -a
# 开启一个socks代理 端口是20002
# socks -n -i127.0.0.1 -p20002


# Log error codes reference
# 0 - Operation successfully complited (connection was closed by one of peers)
# 1-9 - AUTHENTICATION ERRORS
# 1 - Access denied by ACL (deny)
# 2 - Redirection (should not appear)
# 3 - No ACL found, denied by default
# 4 - auth=strong and no username in request
# 5 - auth=strong and no matching username in configuration
# 6 - User found, wrong password (cleartext)
# 7 - User found, wrong password (crypt)
# 8 - User found, wrong password (NT)
# 9 - Redirection data not found (should not appear)
# 10 - Traffic limit exceeded
# 11-19 - CONNECTION ERRORS
# 11 - failed to create socket()
# 12 - failed to bind()
# 13 - failed to connect()
# 14 - failed to getpeername()
# 20-29 - COMMON ERRORS
# 21 - memory allocation failed
# 30-39 - CONNECT PROXY REDIRECTION ERRORS
# 31 - failed to request HTTP CONNECT proxy
# 32 - CONNECT proxy connection timed out or wrong reply
# 33 - CONNECT proxy fails to establish connection
# 34 - CONNECT proxy timed out or closed connection
# 40-49 - SOCKS4 PROXY REDIRECTION ERRORS
# 50-69 - SOCKS5 PROXY REDIRECTION ERRORS
# 70-79 PARENT PROXY CONNECTION ERRORS (identical to 1x)
# 90-99 - established connection errors
# since 0.9
# 90 - unexpected system error (should not happen)
# 91 - unexpected poll error (should not happen)
# 92 - connection terminated by timeout (see timeouts)
# 93 - connection terminated by ratelimit-related timeout or due to errors limit
# 94 - connection termination by server or client with unsent data
# 95 - dirty connection termination by client (or networking issue)
# 96 - dirty connection termination by server (or networking issue)
# 97 - dirty connection termination by both client and server (probably networking issue)
# prior to 0.9:
# 90 - socket error or connection broken
# 91 - TCP/IP common failure
# 92 - connection timed out
# 93 - error on reading data from server
# 94 - error on reading data from client
# 95 - timeout from bandlimin/bandlimout limitations
# 96 - error on sending data to client
# 97 - error on sending data to server
# 98 - server data limit (should not appear)
# 99 - client data limit (should not appear)
# 100 - HOST NOT FOUND
# 200-299 - UDP portmapper specific bugs
# 300-399 - TCP portmapper specific bugs
# 400-499 - SOCKS proxy specific bugs
# 500-599 - HTTP proxy specific bugs
# 600-699 - POP3 proxy specific bugs
# 999 - NOT IMPLEMENTED